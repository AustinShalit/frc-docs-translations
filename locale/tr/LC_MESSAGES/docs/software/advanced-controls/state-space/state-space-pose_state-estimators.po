# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# duru hatipoğlu <melek.hatipoglu@tfo.k12.tr>, 2020
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-08 04:14+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:2
msgid "WPILib Pose and State Estimators"
msgstr "WPILib Poz ve Durum Tahmin Edicileri"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:4
msgid ""
"WPILib includes pose and state estimators for differential, swerve and "
"mecanum drivetrains. These estimators are designed to be drop-in "
"replacements for the existing :ref:`odometry <docs/software/kinematics-and-"
"odometry/index:Kinematics and Odometry>` classes, with added features that "
"utilize an Extended :ref:`Kalman Filter <docs/software/advanced-controls"
"/state-space/state-space-observers:Kalman Filters>` to fuse latency-"
"compensated robot pose estimates with encoder and gyro measurements. These "
"estimators can account for encoder drift and noisy vision data. These "
"estimators can behave identically to their corresponding odometry classes if"
" only ``update`` is called on these estimators."
msgstr ""
"WPILib, diferansiyel, sapma ve mekanik aktarma organları için poz ve durum "
"tahmin ediciler içerir. Bu tahmin ediciler, gecikme telafili robot poz "
"tahminlerini kodlayıcı ve cayro ölçümleriyle birleştirmek için Genişletilmiş"
" :ref:`Kalman Filter <docs/software/advanced-controls/state-space/state-"
"space-observers:Kalman Filters>`  kullanan ek özelliklere sahip mevcut  "
":ref:`odometry <docs/software/kinematics-and-odometry/index:Kinematics and "
"Odometry>` sınıflarının yerine geçecek şekilde tasarlanmıştır. . Bu tahmin "
"ediciler, kodlayıcı sapmasını ve gürültülü görüş verilerini hesaba "
"katabilir. Bu tahmin ediciler, yalnızca ``update`` çağrılırsa, karşılık "
"gelen odometri sınıflarıyla aynı şekilde davranabilirler."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:6
msgid ""
"Pose estimators estimate robot position using a state-space system with the "
"states :math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`, which can "
"represent robot position as a ``Pose2d``. WPILib includes "
"``DifferentialDrivePoseEstimator``, ``SwerveDrivePoseEstimator`` and "
"``MecanumDrivePoseEstimator`` to estimate robot position. In these, users "
"call ``update`` periodically with encoder and gyro measurements (same as the"
" odometry classes) to update the robot's estimated position. When the robot "
"receives measurements of its field-relative position (encoded as a "
"``Pose2d``) from sensors such as computer vision or V-SLAM, the pose "
"estimator latency-compensates the measurement to accurately estimate robot "
"position."
msgstr ""
"Poz tahmin edicileri, durum uzay sistemi kullanarak robot konumunu tahmin "
"eder :math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`, bu robot "
"konumunu ``Pose2d`` olarak temsil edebilir . WPILib, robot konumunu tahmin "
"etmek için ``DifferentialDrivePoseEstimator``, ``SwerveDrivePoseEstimator`` "
"ve ``MecanumDrivePoseEstimator`` içerir. Bunlarda kullanıcılar, robotun "
"tahmini konumunu güncellemek için periyodik olarak kodlayıcı ve cayro "
"ölçümleriyle (odometri sınıflarıyla aynı) ``update`` çağırır. Robot, "
"bilgisayar görüşü veya V-SLAM gibi sensörlerden alana göre konumunun (` "
"Pose2d`` olarak kodlanmış) ölçümlerini aldığında, poz tahminci gecikmesi, "
"robot konumunu doğru bir şekilde tahmin etmek için ölçümü telafi eder."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:8
msgid ""
"The pose estimators perform latency compensation by storing a list of past "
"observer states, including estimated state :math:`\\mathbf{\\hat{x}}`, error"
" covariance :math:`\\mathbf{P}`, inputs and local measurements. When new "
"measurements are applied, the state of the estimator is first rolled back to"
" the measurement's timestamp. Then, the filter corrects its state estimate "
"with the new measurement and applies the inputs between the measurement "
"timestamp and the present time to incorporate the new measurement. This "
"allows for vision solutions with framerates which might otherwise make them "
"unusable be a viable solution for robot localization."
msgstr ""
"Poz tahmin edicileri, tahmini durum :math:`\\mathbf{\\hat{x}}`, hata "
"kovaryansı :math:`\\mathbf{P}`, girdiler ve yerel ölçümler dahil olmak üzere"
" geçmiş gözlemci durumlarının bir listesini depolayarak gecikme telafisi "
"gerçekleştirir. Yeni ölçümler uygulandığında, tahmin edicinin durumu ilk "
"olarak ölçümün zaman damgasına geri döndürülür. Daha sonra filtre, durum "
"tahminini yeni ölçümle düzeltir ve yeni ölçümü dahil etmek için ölçüm zaman "
"damgası ile şimdiki zaman arasındaki girdileri uygular. Bu, aksi takdirde "
"onları kullanılamaz hale getirebilecek ve robot yerelleştirmesi için uygun "
"bir çözüm haline gelebilecek çerçeve hızlarına sahip görüntü işleme "
"çözümlerine olanak tanır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:10
msgid ""
"The following example shows the use of the "
"``DifferentialDrivePoseEstimator``:"
msgstr ""
"Aşağıdaki örnek, ``DifferentialDrivePoseEstimator`` kullanımını gösterir:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:32
msgid "Tuning Pose Estimators"
msgstr "Poz Tahmincilerini Ayarlama"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:34
msgid ""
"All pose estimators offer user-customizable standard deviations for model "
"and measurements. These standard deviations determine how much the filter "
"\"trusts\" each of these states. For example, increasing the standard "
"deviation for measurements (as one might do for a noisy signal) would lead "
"to the estimator trusting its state estimate more than the incoming "
"measurements. On the field, this might mean that the filter can reject noisy"
" vision data well, at the cost of being slow to correct for model "
"deviations. While these values can be estimated beforehand, they very much "
"depend on the unique setup of each robot and global measurement method."
msgstr ""
"Tüm poz tahmin edicileri, model ve ölçümler için kullanıcı tarafından "
"özelleştirilebilir standart sapmalar sunar. Bu standart sapmalar, filtrenin "
"bu durumların her birine ne kadar \"güvendiğini\" belirler. Örneğin, "
"ölçümler için standart sapmanın arttırılması (gürültülü bir sinyal için "
"yapılabileceği gibi), tahmin edicinin kendi durum tahminine gelen "
"ölçümlerden daha fazla güvenmesine yol açacaktır. Sahada bu, filtrenin model"
" sapmalarını yavaş yavaş düzeltmek pahasına gürültülü görüş verilerini iyi "
"bir şekilde reddedebileceği anlamına gelebilir. Bu değerler önceden tahmin "
"edilebilirken, bunlar büyük ölçüde her robotun benzersiz kurulumuna ve genel"
" ölçüm yöntemine bağlıdır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:37
msgid "The Differential Drive State Estimator"
msgstr "Diferansiyel Sürüş Durum Tahmincisi"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:39
msgid ""
"The ``DifferentialDriveStateEstimator`` (C++/Java) is a more advanced "
"estimator, which includes u-error estimation and encoder distance "
"measurements to more accurately estimate robot position. U-error can account"
" for unmodeled dynamics by estimating the voltage being lost to wheel drag "
"or scrub. The ``DifferentialDriveStateEstimator`` uses a system with the "
"states :math:`\\begin{bmatrix} x & y & \\theta & \\text{vel}_l & "
"\\text{vel}_r & \\text{dist}_l & \\text{dist}_r & \\text{voltError}_l & "
"\\text{voltError}_r & \\text{headingError} \\end{bmatrix}^T`, outputs left "
"and right voltages, and can take inputs from either vision (as "
":math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`) or encoders and "
"gyros (as  :math:`\\begin{bmatrix} \\text{dist}_l & \\text{dist}_r & \\theta"
" \\end{bmatrix}^T`)."
msgstr ""
"``DifferentialDriveStateEstimator`` (C ++ / Java), robot konumunu daha doğru"
" bir şekilde tahmin etmek için u-error tahmini ve kodlayıcı mesafe "
"ölçümlerini içeren daha gelişmiş bir tahmincidir. U hatası, tekerlek "
"sürüklemesi veya itilmeye bağlı olarak kaybedilen voltajı tahmin ederek "
"modellenmemiş dinamikleri açıklayabilir. ``DifferentialDriveStateEstimator``"
" şu durumlara-states sahip bir sistem kullanır :math:`\\begin{bmatrix} x & y"
" & \\theta & \\text{vel}_l & \\text{vel}_r & \\text{dist}_l & \\text{dist}_r"
" & \\text{voltError}_l & \\text{voltError}_r & \\text{headingError} "
"\\end{bmatrix}^T`,sol ve sağ voltaj çıkışlarını sağlar ve girişleri "
"matematik görüntüden  (:math:`\\begin{bmatrix}x & y & \\theta "
"\\end{bmatrix}^T`) veya kodlayıcılar ve jiroskoplar  (as "
":math:`\\begin{bmatrix} \\text{dist}_l & \\text{dist}_r & \\theta "
"\\end{bmatrix}^T`) dan."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:41
msgid ""
"For the ``DifferentialDriveStateEstimator``, it is important that the state-"
"space model is accurate to the physical hardware. Characterization using the"
" frc-characterization drivetrain tools to find linear and angular kV and kA,"
" combined with ``LinearSystem``'s ``identifyDrivetrainSystem`` "
"(Java)/``IdentifyDrivetrainSystem`` (C++), is an easy way to accurately "
"create a state-space model of your robot's drivetrain."
msgstr ""
"``DifferentialDriveStateEstimator`` için, durum-uzay modelinin fiziksel "
"donanım için doğru olması önemlidir. Doğrusal ve açısal kV ve kA'yı bulmak "
"için frc-characterization drivetrain tools araçlarını kullanarak, "
"``LinearSystem`` in "
"``identifyDrivetrainSystem''(Java)/``IdentifyDrivetrainSystem`` (C++) ile "
"birlikte, doğru bir şekilde Robotunuzun aktarma organlarının durum uzay "
"modelini oluşturun."
