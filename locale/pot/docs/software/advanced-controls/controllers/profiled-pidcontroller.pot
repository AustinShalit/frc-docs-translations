# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-25 04:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:2
msgid "Combining Motion Profiling and PID Control with ProfiledPIDController"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:4
msgid "For a guide on implementing the ``ProfiledPIDController`` class in the :ref:`command-based framework <docs/software/commandbased/what-is-command-based:What Is \"Command-Based\" Programming?>` framework, see :ref:`docs/software/commandbased/profilepid-subsystems-commands:Combining Motion Profiling and PID in Command-Based`."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:6
msgid "In the previous article, we saw how to use the ``TrapezoidProfile`` class to create and use a trapezoidal motion profile.  The example code from that article demonstrates manually composing the ``TrapezoidProfile`` class with the external PID control feature of a \"smart\" motor controller."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:8
msgid "This combination of functionality (a motion profile for generating setpoints combined with a PID controller for following them) is extremely common.  To facilitate this, WPILib comes with a ``ProfiledPIDController`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj/controller/ProfiledPIDController.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc_1_1ProfiledPIDController.html>`__) that does most of the work of combining these two functionalities.  The API of the ``ProfiledPIDController`` is very similar to that of the ``PIDController``, allowing users to add motion profiling to a PID-controlled mechanism with very few changes to their code."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:11
msgid "Using the ProfiledPIDController class"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:13
msgid "In C++, the ``ProfiledPIDController`` class is templated on the unit type used for distance measurements, which may be angular or linear.  The passed-in values *must* have units consistent with the distance units, or a compile-time error will be thrown.  For more information on C++ units, see :ref:`docs/software/basic-programming/cpp-units:The C++ Units Library`."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:15
msgid "Much of the functionality of ``ProfiledPIDController`` is effectively identical to that of ``PIDController``.  Accordingly, this article will only cover features that are substantially-changed to accommodate the motion profiling functionality.  For information on standard ``PIDController`` features, see :ref:`docs/software/advanced-controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:19
msgid "Constructing a ProfiledPIDController"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:21
msgid "C++ is often able to infer the type of the inner classes, and thus a simple initializer list (without the class name) can be sent as a parameter.  The full class name is included in the example below for clarity."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:23
msgid "Creating a ``ProfiledPIDController`` is nearly identical to :ref:`creating a PIDController <docs/software/advanced-controls/controllers/pidcontroller:Constructing a PIDController>`.  The only difference is the need to supply a set of :ref:`trapezoidal profile constraints <docs/software/advanced-controls/controllers/trapezoidal-profiles:Constraints>`, which will be automatically forwarded to the internally-generated ``TrapezoidProfile`` instances:"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:46
msgid "Goal vs Setpoint"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:48
msgid "A major difference between a standard ``PIDController`` and a ``ProfiledPIDController`` is that the actual *setpoint* of the control loop is not directly specified by the user.  Rather, the user specifies a *goal* position or state, and the setpoint for the controller is computed automatically from the generated motion profile between the current state and the goal.  So, while the user-side call looks mostly identical:"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:64
msgid "The specified ``goal`` value (which can be either a position value or a ``TrapezoidProfile.State``, if nonzero velocity is desired) is *not* necessarily the *current* setpoint of the loop - rather, it is the *eventual* setpoint once the generated profile terminates."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:67
msgid "Getting/Using the Setpoint"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:69
msgid "Since the ``ProfiledPIDController`` goal differs from the setpoint, is if often desirable to poll the current setpoint of the controller (for instance, to get values to use with :ref:`feedforward <docs/software/advanced-controls/controllers/combining-feedforward-feedback:Using Feedforward Components with PID>`).  This can be done with the ``getSetpoint()`` method."
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:71
msgid "The returned setpoint might then be used as in the following example:"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:98
msgid "Complete Usage Example"
msgstr ""

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:100
msgid "A more complete example of ``ProfiledPIDController`` usage is provided in the ElevatorProfilePID example project (`Java <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorprofiledpid>`__, `C++ <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/ElevatorProfiledPID/cpp>`__):"
msgstr ""
