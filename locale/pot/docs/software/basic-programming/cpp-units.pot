# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-23 04:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:2
msgid "The C++ Units Library"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:4
msgid "The 2020 release of WPILib is coupled with a `Units <https://github.com/nholthaus/units>`_ library for C++ teams.  This library leverages the C++ `type system <https://docs.microsoft.com/en-us/cpp/cpp/cpp-type-system-modern-cpp?view=vs-2019>`__ to enforce proper dimensionality for method parameters, automatically perform unit conversions, and even allow users to define arbitrary defined unit types.  Since the C++ type system is enforced at compile-time, the library has essentially no runtime cost."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:7
msgid "Using the Units Library"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:9
msgid "The units library is a header-only library. You must include the ``units.h`` header in your code files."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:16
msgid "Unit Types and Container Types"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:18
msgid "The C++ units library is based around two sorts of type definitions: unit types and container types."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:21
msgid "Unit Types"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:23
msgid "Unit types correspond to the abstract concept of a unit, without any actual stored value.  Unit types are the fundamental \"building block\" of the units library - all unit types are defined constructively (using the ``compound_unit`` template) from a small number of \"basic\" unit types (such as ``meters``, ``seconds``, etc)."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:25
msgid "While unit types cannot contain numerical values, their use in building other unit types means that when a type or method uses a `template parameter <http://www.cplusplus.com/doc/oldtutorial/templates/>`__ to specify its dimensionality, that parameter will be a unit type."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:28
msgid "Container Types"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:30
msgid "Container types correspond to an actual quantity dimensioned according to some unit - that is, they are what actually hold the numerical value. Container types are constructed from unit types with the ``unit_t`` template.  Most unit types have a corresponding container type that has the same name suffixed by ``_t`` - for example, the unit type ``units::meter`` corresponds to the container type ``units::meter_t``."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:32
msgid "Whenever a specific quantity of a unit is used (as a variable or a method parameter), it will be an instance of the container type.  By default, container types will store the actual value as a ``double`` - advanced users may change this by calling the ``unit_t`` template manually."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:34
msgid "A full list of unit and container types can be found in the `documentation <https://nholthaus.github.io/units/namespaces.html>`__."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:37
msgid "Creating Instances of Units"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:39
msgid "To create an instance of a specific unit, we create an instance of its container type:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:46
msgid "Alternatively, the units library has `type literals <https://en.cppreference.com/w/cpp/language/user_literal>`__ defined for some of the more common container types.  These can be used in conjunction with type inference via ``auto`` to define a unit more succinctly:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:53
msgid "Units can also be initialized using a value of an another container type, as long as the types can be converted between one another. For example, a ``meter_t`` value can be created from a ``foot_t`` value."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:60
msgid "In fact, all container types representing convertible unit types are *implicitly convertible*.  Thus, the following is perfectly legal:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:66
msgid "In short, we can use *any* unit of length in place of *any other* unit of length, anywhere in our code; the units library will automatically perform the correct conversion for us."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:69
msgid "Performing Arithmetic with Units"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:71
msgid "Container types support all of the ordinary arithmetic operations of their underlying data type, with the added condition that the operation must be *dimensionally* sound.  Thus, addition must always be performed on two compatible container types:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:84
msgid "Multiplication may be performed on any pair of container types, and yields the container type of a compound unit:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:86
msgid "When a calculation yields a compound unit type, this type will only be checked for validity at the point of operation if the result type is specified explicitly.  If ``auto`` is used, this check will not occur.  For example, when we divide distance by time, we may want to ensure the result is, indeed, a velocity (i.e. ``units::meter_per_second_t``). If the return type is declared as ``auto``, this check will not be made."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:99
msgid "``<cmath>`` Functions"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:101
msgid "Some ``std`` functions (such as ``clamp``) are templated to accept any type on which the arithmetic operations can be performed.  Quantities stored as container types will work with these functions without issue."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:103
msgid "However, other ``std`` functions work only on ordinary numerical types (e.g. ``double``).  The units library's ``units::math`` namespace contains wrappers for several of these functions that accept units. Examples of such functions include ``sqrt``, ``pow``, etc."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:111
msgid "Removing the Unit Wrapper"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:113
msgid "To convert a container type to a raw numeric value, the ``to<..>()`` method can be used, where the template argument is the underlying type."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:122
msgid "Example of the Units Library in WPILib Code"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:123
msgid "Several arguments for methods in new features of WPILib (ex. :ref:`kinematics <docs/software/kinematics-and-odometry/intro-and-chassis-speeds:What is kinematics?>`) use the units library. Here is an example of :ref:`sampling a trajectory <docs/software/advanced-controls/trajectories/manipulating-trajectories:Sampling the trajectory>`."
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:134
msgid "Some WPILib classes represent objects that could naturally work with multiple choices of unit types - for example, a motion profile might operate on either linear distance (e.g. meters) or angular distance (e.g. radians).  For such classes, the unit type is required as a template parameter:"
msgstr ""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:148
msgid "For more detailed documentation, please visit the official `GitHub page <https://github.com/nholthaus/units>`_ for the units library."
msgstr ""
