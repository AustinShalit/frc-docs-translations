# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-21 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:2
msgid "PID Control through PIDSubsystems and PIDCommands"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:4
msgid "For a description of the WPILib PID control features used by these command-based wrappers, see :ref:`docs/software/advanced-controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:6
msgid "Unlike the earlier version of ``PIDController``, the 2020 ``PIDController`` class runs *synchronously*, and is not handled in its own thread.  Accordingly, changing its ``period`` parameter will *not* change the actual frequency at which it runs in any of these wrapper classes.  Users should never modify the ``period`` parameter unless they are certain of what they are doing."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:8
msgid "One of the most common control algorithms used in FRC is the `PID controller <https://en.wikipedia.org/wiki/PID_controller>`__. WPILib offers its own :ref:`PIDController <docs/software/advanced-controls/controllers/pidcontroller:PID Control in WPILib>` class to help teams implement this functionality on their robots. To further help teams integrate PID control into a command-based robot project, the command-based library includes two convenience wrappers for the ``PIDController`` class: ``PIDSubsystem``, which integrates the PID controller into a subsystem, and ``PIDCommand``, which integrates the PID controller into a command."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:11
msgid "PIDSubsystems"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:13
msgid "The ``PIDSubsystem`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/PIDSubsystem.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1PIDSubsystem.html>`__) allows users to conveniently create a subsystem with a built-in ``PIDController``.  In order to use the ``PIDSubsystem`` class, users must create a subclass of it."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:16
msgid "Creating a PIDSubsystem"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:18
msgid "When subclassing ``PIDSubsystem``, users must override two abstract methods to provide functionality that the class will use in its ordinary operation:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:21
msgid "getMeasurement()"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:33
msgid "The ``getMeasurement`` method returns the current measurement of the process variable.  The ``PIDSubsystem`` will automatically call this method from its ``periodic()`` block, and pass its value to the control loop."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:35
msgid "Users should override this method to return whatever sensor reading they wish to use as their process variable measurement."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:38
msgid "useOutput()"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:51
msgid "The ``useOutput()`` method consumes the output of the PID controller, and the current setpoint (which is often useful for computing a feedforward).  The ``PIDSubsystem`` will automatically call this method from its ``periodic()`` block, and pass it the computed output of the control loop."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:53
msgid "Users should override this method to pass the final computed control output to their subsystem's motors."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:56
msgid "Passing In the Controller"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:58
msgid "Users must also pass in a ``PIDController`` to the ``PIDSubsystem`` base class through the superclass constructor call of their subclass.  This serves to specify the PID gains, as well as the period (if the user is using a non-standard main robot loop period)."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:60
msgid "Additional modifications (e.g. enabling continuous input) can be made to the controller in the constructor body by calling ``getController()``."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:63
msgid "Using a PIDSubsystem"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:65
msgid "Once an instance of a ``PIDSubsystem`` subclass has been created, it can be used by commands through the following methods:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:68
msgid "setSetpoint()"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:70
msgid "The ``setSetpoint()`` method can be used to set the setpoint of the ``PIDSubsystem``.  The subsystem will automatically track to the setpoint using the defined output:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:85
msgid "enable() and disable()"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:87
msgid "The ``enable()`` and ``disable()`` methods enable and disable the PID control of the ``PIDSubsystem``.  When the subsystem is enabled, it will automatically run the control loop and track the setpoint.  When it is disabled, no control is performed."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:89
msgid "Additionally, the ``enable()`` method resets the internal ``PIDController``, and the ``disable()`` method calls the user-defined `useOutput()`_ method with both output and setpoint set to ``0``."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:92
msgid "Full PIDSubsystem Example"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:94
msgid "What does a ``PIDSubsystem`` look like when used in practice? The following examples are taken from the FrisbeeBot example project (`Java <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot>`__, `C++ <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/Frisbeebot>`__):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:122
msgid "Using a ``PIDSubsystem`` with commands can be very simple:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:151
msgid "PIDCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:153
msgid "The ``PIDCommand`` class allows users to easily create commands with a built-in PIDController.  As with PIDSubsystem, users can create a ``PIDCommand`` by subclassing the ``PIDCommand`` class.  However, as with many of the other command classes in the command-based library, users may want to save code by defining a ``PIDCommand`` :ref:`inline <docs/software/commandbased/convenience-features:Inline Command Definitions>`."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:156
msgid "Creating a PIDCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:158
msgid "A ``PIDCommand`` can be created two ways - by subclassing the ``PIDCommand`` class, or by defining the command :ref:`inline <docs/software/commandbased/convenience-features:Inline Command Definitions>`.  Both methods ultimately extremely similar, and ultimately the choice of which to use comes down to where the user desires that the relevant code be located."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:160
msgid "In either case, a ``PIDCommand`` is created by passing the necessary parameters to its constructor (if defining a subclass, this can be done with a `super()` call):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:181
msgid "controller"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:183
msgid "The ``controller`` parameter is the ``PIDController`` object that will be used by the command.  By passing this in, users can specify the PID gains and the period for the controller (if the user is using a nonstandard main robot loop period)."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:185
msgid "When subclassing ``PIDCommand``, additional modifications (e.g. enabling continuous input) can be made to the controller in the constructor body by calling ``getController()``."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:188
msgid "measurementSource"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:190
msgid "The ``measurementSource`` parameter is a function (usually passed as a :ref:`lambda <docs/software/commandbased/convenience-features:Lambda Expressions (Java)>`) that returns the measurement of the process variable.  Passing in the ``measurementSource`` function in ``PIDCommand`` is functionally analogous to overriding the `getMeasurement()`_ function in ``PIDSubsystem``."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:192
msgid "When subclassing ``PIDCommand``, advanced users may further modify the measurement supplier by modifying the class's ``m_measurement`` field."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:195
msgid "setpointSource"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:197
msgid "The ``setpointSource`` parameter is a function (usually passed as a :ref:`lambda <docs/software/commandbased/convenience-features:Lambda Expressions (Java)>`) that returns the current setpoint for the control loop.  If only a constant setpoint is needed, an overload exists that takes a constant setpoint rather than a supplier."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:199
msgid "When subclassing ``PIDCommand``, advanced users may further modify the setpoint supplier by modifying the class's ``m_setpoint`` field."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:202
msgid "useOutput"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:204
msgid "The ``useOutput`` parameter is a function (usually passed as a :ref:`lambda <docs/software/commandbased/convenience-features:Lambda Expressions (Java)>`) that consumes the output and setpoint of the control loop.  Passing in the ``useOutput`` function in ``PIDCommand`` is functionally analogous to overriding the `useOutput()`_ function in ``PIDSubsystem``."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:206
msgid "When subclassing ``PIDCommand``, advanced users may further modify the output consumer by modifying the class's ``m_useOutput`` field."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:209
msgid "requirements"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:211
msgid "Like all inlineable commands, ``PIDCommand`` allows the user to specify its subsystem requirements as a constructor parameter."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:214
msgid "Full PIDCommand Example"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:216
msgid "What does a ``PIDCommand`` look like when used in practice? The following examples are from the GyroDriveCommands example project (`Java <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__, `C++ <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:244
msgid "And, for an :ref:`inlined <docs/software/commandbased/convenience-features:Inline Command Definitions>`  example:"
msgstr ""
