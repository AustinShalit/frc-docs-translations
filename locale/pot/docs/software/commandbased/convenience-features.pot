# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-21 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:2
msgid "Convenience Features"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:4
msgid "While the previously-described methodologies will work fine for writing command-based robot code, the command-based libraries contain several convenience features for more-advanced users that can greatly reduce the verbosity/complexity of command-based code. It is highly recommended that users familiarize themselves with these features to maximize the value they get out of the command-based libraries."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:7
msgid "Inline Command Definitions"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:9
msgid "While users are able to create commands by explicitly writing command classes (either by subclassing ``CommandBase`` or implementing ``Command``), for many commands (such as those that simply call a single subsystem method) this involves a lot of wasteful boilerplate code. To help alleviate this, many of the prewritten commands included in the command-based library may be *inlined* - that is, the command body can be defined in a single line of code at command construction."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:12
msgid "Passing Subroutines As Parameters"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:14
msgid "In order to inline a command definition, users require some way to specify what code the commands will run as constructor parameters. Fortunately, both Java and C++ offer users the ability to pass subroutines as parameters."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:17
msgid "Method References (Java)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:19
msgid "In Java, a reference to a subroutine that can be passed as a parameter is called a method reference. The general syntax for a method reference is ``object::method``. Note that no method parameters are included, since the method *itself* is the parameter. The method is not being called - it is being passed to another piece of code (in this case, a command) so that *that* code can call it when needed. For further information on method references, see `the official Oracle documentation <https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html>`__."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:22
msgid "Lambda Expressions (Java)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:24
msgid "While method references work well for passing a subroutine that has already been written, often it is inconvenient/wasteful to write a subroutine solely for the purpose of sending as a method reference, if that subroutine will never be used elsewhere. To avoid this, Java also supports a feature called “lambda expressions.” A lambda expression is an inline method definition - it allows a subroutine to be defined *inside of a parameter list*. For specifics on how to write Java lambda expressions, see `this tutorial <https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#syntax>`__."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:27
msgid "Lambda Expressions (C++)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:29
msgid "C++ lacks a close equivalent to Java method references - pointers to member functions are generally not directly useable as parameters due to the presence of the implicit ``this`` parameter.  However, C++ does offer lambda expressions - in addition, the lambda expressions offered by C++ are in many ways more powerful than those in Java.  For specifics on how to write C++ lambda expressions, see `cppreference <https://en.cppreference.com/w/cpp/language/lambda>`__."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:32
msgid "Inlined Command Example"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:34
msgid "So, what does an inlined command definition look like in practice?"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:36
msgid "The ``InstantCommand`` class provides an example of a type of command that benefits greatly from inlining. Consider the following from the HatchBotInlined example project (`Java <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbotinlined>`__, `C++ <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/HatchbotInlined>`__):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:64
msgid "Instead of wastefully writing separate ``GrabHatch`` and ``ReleaseHatch`` commands which call only one method before ending, both can be accomplished with a simple inline definition by passing appropriate subsystem method."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:67
msgid "Included Command Types"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:69
msgid "The command-based library includes a variety of pre-written commands for commonly-encountered use cases. Many of these commands are intended to be used “out-of-the-box” via `inlining <#inline-command-definitions>`_, however they may be subclassed, as well. A list of the included pre-made commands can be found below, along with brief examples of each - for more rigorous documentation, see the API docs (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/package-summary.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html>`__)."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:72
msgid "ConditionalCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:74
msgid "The ``ConditionalCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/ConditionalCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1ConditionalCommand.html>`__) runs one of two commands when executed, depending on a user-specified true-or-false condition:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:89
msgid "SelectCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:91
msgid "While the Java version of SelectCommand simply uses an ``Object`` as a key, the C++ version is templated on the key type."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:93
msgid "An alternate version of SelectCommand simply takes a method that supplies the command to be run - this can be very succinct, but makes inferring the command's requirements impossible, and so leaves the user responsible for manually adding the requirements to the SelectCommand."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:95
msgid "The ``SelectCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/SelectCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1SelectCommand.html>`__) is a generalization of the ``ConditionalCommand`` class that runs one of a selection of commands based on the value of a user-specified selector.  The following example code is taken from the SelectCommand example project (`Java <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/selectcommand>`__, `C++ <https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/SelectCommand>`__):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:116
msgid "InstantCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:118
msgid "The ``InstantCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/InstantCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1InstantCommand.html>`__) executes a single action on initialization, and then ends immediately:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:133
msgid "RunCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:135
msgid "The ``RunCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/RunCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1RunCommand.html>`__) runs a specified method repeatedly in its ``execute()`` block. It does not have end conditions by default; users can either subclass it, or `decorate <#command-decorator-methods>`_ it to add them."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:161
msgid "StartEndCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:163
msgid "The ``StartEndCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/StartEndCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1StartEndCommand.html>`__) executes an action when starting, and a second one when ending. It does not have end conditions by default; users can either subclass it, or `decorate <#command-decorator-methods>`_ an inlined command to add them."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:190
msgid "FunctionalCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:192
msgid "The ``FunctionalCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/FunctionalCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1FunctionalCommand.html>`__) allows all four ``Command`` methods to be passed in as method references or lambdas:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:227
msgid "PrintCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:229
msgid "The ``PrintCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/PrintCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1PrintCommand.html>`__) prints a given string."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:242
msgid "ScheduleCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:244
msgid "The ``ScheduleCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/ScheduleCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1ScheduleCommand.html>`__) schedules a specified command, and ends instantly:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:258
msgid "This is often useful for \"forking off\" from command groups: by default, commands in command groups are run *through* the command group, and are never themselves seen by the scheduler.  Accordingly, their requirements are added to the group's requirements.  While this is usually fine, sometimes it is undesirable for the entire command group to gain the requirements of a single command - a good solution is to \"fork off\" from the command group and schedule that command separately."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:261
msgid "ProxyScheduleCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:263
msgid "The ``ProxyScheduleCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/ProxyScheduleCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1ProxyScheduleCommand.html>`__) schedules a specified command, and does not end until that command ends:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:277
msgid "This is often useful for \"forking off\" from command groups: by default, commands in command groups are run *through* the command group, and are never themselves seen by the scheduler.  Accordingly, their requirements are added to the group's requirements.  While this is usually fine, sometimes it is undesirable for the entire command group to gain the requirements of a single command - a good solution is to \"fork off\" from the command group and schedule the command separately."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:280
msgid "WaitCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:282
msgid "The ``WaitCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/WaitCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1WaitCommand.html>`__) does nothing, and ends after a specified period of time elapses after its initial scheduling:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:296
msgid "This is often useful as a component of a command group."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:299
msgid "WaitUntilCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:301
msgid "The match timer used by WaitUntilCommand does *not* provide an official match time!  While it is fairly accurate, use of this timer can *not* guarantee the legality of your robot's actions."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:303
msgid "The ``WaitUntilCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/WaitUntilCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1WaitUntilCommand.html>`__) does nothing, and ends once a specified condition becomes true, or until a specified match time passes."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:324
msgid "PerpetualCommand"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:326
msgid "The ``PerpetualCommand`` class (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/PerpetualCommand.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1PerpetualCommand.html>`__) runs a given command with its end condition removed, so that it runs forever (unless externally interrupted):"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:341
msgid "Command Decorator Methods"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:343
msgid "The ``Command`` interface contains a number of defaulted “decorator” methods which can be used to add additional functionality to existing commands. A “decorator” method is a method that takes an object (in this case, a command) and returns an object of the same type (i.e. a command) with some additional functionality added to it. A list of the included decorator methods with brief examples is included below - for rigorous documentation, see the API docs (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html>`__)."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:352
msgid "withTimeout"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:354
msgid "The ``withTimeout()`` decorator (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#withTimeout(double)>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html#a3a10e79038afc9bc7c98461b7dbb895b>`__) adds a timeout to a command. The decorated command will be interrupted if the timeout expires:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:370
msgid "withInterrupt"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:372
msgid "The ``withInterrupt()`` (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#withInterrupt(java.util.function.BooleanSupplier)>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html#a4a6078c253a1578b3310833dcdfc01f0>`__) decorator adds a condition on which the command will be interrupted:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:387
msgid "andThen"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:389
msgid "The ``andThen()`` decorator (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#andThen(java.lang.Runnable)>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html#ade79bfb9d4ad670cdcb35369c0081b37>`__) adds a method to be executed after the command ends:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:404
msgid "beforeStarting"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:406
msgid "The ``beforeStarting()`` decorator (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#beforeStarting(java.lang.Runnable)>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html#a65155a6d7062deed375da196d2ba4c89>`__) adds a method to be executed before the command starts:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:421
msgid "alongWith (Java only)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:423
msgid "This decorator is not supported in C++ due to technical constraints - users should simply construct a parallel command group the ordinary way instead."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:425
msgid "The ``alongWith()`` `decorator <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#alongWith(edu.wpi.first.wpilibj2.command.Command...)>`__ returns a parallel command group containing the command, along with all the other commands passed in as arguments:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:433
msgid "raceWith (Java only)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:435
msgid "This decorator is not supported in C++ due to technical constraints - users should simply construct a parallel race group the ordinary way instead."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:437
msgid "The ``raceWith()`` `decorator <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#raceWith(edu.wpi.first.wpilibj2.command.Command...)>`__ returns a parallel command race containing the command, along with all the other commands passed in as arguments:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:445
msgid "deadlineWith (Java only)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:447
msgid "This decorator is not supported in C++ due to technical constraints - users should simply construct a parallel deadline group the ordinary way instead."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:449
msgid "The ``deadlineWith()`` `decorator <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#deadlineWith(edu.wpi.first.wpilibj2.command.Command...)>`__ returns a parallel deadline group containing the command, along with all the other commands passed in as arguments:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:457
msgid "perpetually"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:459
msgid "The ``perpetually()`` decorator (`Java <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/Command.html#perpetually()>`__, `C++ <https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc2_1_1Command.html#ae1583c73c9b953d8ff730d4809926518>`__) removes the end condition of a command, so that it runs forever."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:474
msgid "Composing Decorators"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:476
msgid "Remember that decorators, like all command groups, can be composed! This allows very powerful and concise inline expressions:"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:484
msgid "Static Factory Methods for Command Groups (Java only)"
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:486
msgid "These factory methods are not included in the C++ command library, as the reduction in verbosity would be minimal - C++ commands should be stack-allocated, removing the need for the ``new`` keyword."
msgstr ""

#: ../../frc-docs/source/docs/software/commandbased/convenience-features.rst:488
msgid "If users do not wish to use the ``andThen``, ``alongWith``, ``raceWith``, and ``deadlineWith`` decorators for declaring command groups, but still wish to reduce verbosity compared to calling the constructors, the ``CommandGroupBase`` `class <https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj2/command/CommandGroupBase.html>`__ contains four static factory methods for declaring command groups: ``sequence()``, ``parallel()``, ``race()``, and ``deadline()``. When used from within a command group subclass or in combination with ``import static``, these become extremely concise and greatly aid in command composition:"
msgstr ""
