# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-08 04:10+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:2
msgid "WPILib Pose and State Estimators"
msgstr "Estimateurs de pose et d'état WPILib"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:4
msgid ""
"WPILib includes pose and state estimators for differential, swerve and "
"mecanum drivetrains. These estimators are designed to be drop-in "
"replacements for the existing :ref:`odometry <docs/software/kinematics-and-"
"odometry/index:Kinematics and Odometry>` classes, with added features that "
"utilize an Extended :ref:`Kalman Filter <docs/software/advanced-controls"
"/state-space/state-space-observers:Kalman Filters>` to fuse latency-"
"compensated robot pose estimates with encoder and gyro measurements. These "
"estimators can account for encoder drift and noisy vision data. These "
"estimators can behave identically to their corresponding odometry classes if"
" only ``update`` is called on these estimators."
msgstr ""
"WPILib comprend des estimateurs de pose et d'état pour les transmissions "
"différentielles, déviées et mécaniques. Ces estimateurs sont conçus pour "
"remplacer les classes existantes :ref:`odometry <docs/software/kinematics-"
"and-odometry/index:Kinematics and Odometry>`, avec des fonctionnalités "
"supplémentaires qui utilisent un :ref:`filtre de Kalman <docs/software"
"/advanced-controls/state-space/state-space-observers:Kalman Filters>` pour "
"fusionner les estimations de pose de robot compensées par latence avec des "
"mesures d'encodeur et de gyroscope. Ces estimateurs peuvent tenir compte de "
"la dérive des encodeurs et des données de vision avec bruit. Ces estimateurs"
" peuvent se comporter de manière identique à leurs classes d'odométrie "
"correspondantes si seulement la commande ``update`` est appelée sur ces "
"estimateurs."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:6
msgid ""
"Pose estimators estimate robot position using a state-space system with the "
"states :math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`, which can "
"represent robot position as a ``Pose2d``. WPILib includes "
"``DifferentialDrivePoseEstimator``, ``SwerveDrivePoseEstimator`` and "
"``MecanumDrivePoseEstimator`` to estimate robot position. In these, users "
"call ``update`` periodically with encoder and gyro measurements (same as the"
" odometry classes) to update the robot's estimated position. When the robot "
"receives measurements of its field-relative position (encoded as a "
"``Pose2d``) from sensors such as computer vision or V-SLAM, the pose "
"estimator latency-compensates the measurement to accurately estimate robot "
"position."
msgstr ""
"Les estimateurs de pose estiment la position du robot en utilisant un "
"système d'espace d'états avec les états :math:`\\begin{bmatrix}x & y & "
"\\theta \\end{bmatrix}^T`, qui peut représenter la position du robot sous "
"forme de ``Pose2d``. WPILib inclut ``DifferentialDrivePoseEstimator``, "
"``SwerveDrivePoseEstimator`` et ``MecanumDrivePoseEstimator`` pour estimer "
"la position du robot. Dans ceux-ci, les utilisateurs appellent "
"périodiquement ``update`` avec les mesures de l'encodeur et du gyroscope "
"(identiques aux classes d'odométrie) pour mettre à jour la position estimée "
"du robot. Lorsque le robot reçoit des mesures de sa position relative au "
"champ (codée en tant que ``Pose2d``) de capteurs tels que la vision par "
"ordinateur ou V-SLAM, l'estimateur de pose compense la latence de la mesure "
"pour estimer avec précision la position du robot."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:8
msgid ""
"The pose estimators perform latency compensation by storing a list of past "
"observer states, including estimated state :math:`\\mathbf{\\hat{x}}`, error"
" covariance :math:`\\mathbf{P}`, inputs and local measurements. When new "
"measurements are applied, the state of the estimator is first rolled back to"
" the measurement's timestamp. Then, the filter corrects its state estimate "
"with the new measurement and applies the inputs between the measurement "
"timestamp and the present time to incorporate the new measurement. This "
"allows for vision solutions with framerates which might otherwise make them "
"unusable be a viable solution for robot localization."
msgstr ""
"Les estimateurs de pose effectuent une compensation de latence en stockant "
"une liste des états d'observateurs passés, y compris l'état estimé "
":math:`\\mathbf{\\hat{x}}`, la covariance d'erreur :math:`\\mathbf{P}`, les "
"entrées et les mesures locales . Lorsque de nouvelles mesures sont "
"appliquées, l'état de l'estimateur est d'abord restauré à l'horodatage de la"
" mesure. Ensuite, le filtre corrige son estimation d'état avec la nouvelle "
"mesure et applique les entrées entre l'horodatage de la mesure et l'instant "
"présent pour incorporer la nouvelle mesure. Cela permet des solutions de "
"vision avec des fréquences d'images qui pourraient autrement les rendre "
"inutilisables, ce qui constitue une solution viable pour la localisation de "
"robots."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:10
msgid ""
"The following example shows the use of the "
"``DifferentialDrivePoseEstimator``:"
msgstr ""
"L'exemple suivant montre l'utilisation du "
"``DifferentialDrivePoseEstimator``:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:32
msgid "Tuning Pose Estimators"
msgstr "Réglage des estimateurs de pose"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:34
msgid ""
"All pose estimators offer user-customizable standard deviations for model "
"and measurements. These standard deviations determine how much the filter "
"\"trusts\" each of these states. For example, increasing the standard "
"deviation for measurements (as one might do for a noisy signal) would lead "
"to the estimator trusting its state estimate more than the incoming "
"measurements. On the field, this might mean that the filter can reject noisy"
" vision data well, at the cost of being slow to correct for model "
"deviations. While these values can be estimated beforehand, they very much "
"depend on the unique setup of each robot and global measurement method."
msgstr ""
"Tous les estimateurs de pose offrent des écarts-types personnalisables par "
"l'utilisateur pour le modèle et les mesures. Ces écarts types déterminent "
"dans quelle mesure le filtre \"se conforme\" à chacun de ces états. Par "
"exemple, augmenter l'écart type pour les mesures (comme on pourrait le faire"
" pour un signal bruyant) conduirait l'estimateur à faire davantage confiance"
" à son estimation d'état qu'aux mesures entrantes. Sur le terrain, cela "
"pourrait signifier que le filtre peut bien rejeter les données de vision "
"bruyantes, au prix d'une lenteur à corriger les écarts du modèle. Bien que "
"ces valeurs puissent être estimées à l'avance, elles dépendent beaucoup de "
"la configuration unique de chaque robot et de la méthode de mesure globale."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:37
msgid "The Differential Drive State Estimator"
msgstr "L'estimateur d'état pour une base pilotable différentielle"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:39
msgid ""
"The ``DifferentialDriveStateEstimator`` (C++/Java) is a more advanced "
"estimator, which includes u-error estimation and encoder distance "
"measurements to more accurately estimate robot position. U-error can account"
" for unmodeled dynamics by estimating the voltage being lost to wheel drag "
"or scrub. The ``DifferentialDriveStateEstimator`` uses a system with the "
"states :math:`\\begin{bmatrix} x & y & \\theta & \\text{vel}_l & "
"\\text{vel}_r & \\text{dist}_l & \\text{dist}_r & \\text{voltError}_l & "
"\\text{voltError}_r & \\text{headingError} \\end{bmatrix}^T`, outputs left "
"and right voltages, and can take inputs from either vision (as "
":math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`) or encoders and "
"gyros (as  :math:`\\begin{bmatrix} \\text{dist}_l & \\text{dist}_r & \\theta"
" \\end{bmatrix}^T`)."
msgstr ""
"Le ``DifferentialDriveStateEstimator`` (C++/Java) est un estimateur plus "
"avancé, qui comprend une estimation de l'erreur u et des mesures de distance"
" des encodeurs pour estimer plus précisément la position du robot. L'erreur "
"U peut expliquer une dynamique sans modèle en estimant la perte de tension "
"en raison de la traînée ou du frottement des roues. Le "
"``DifferentialDriveStateEstimator`` utilise un système avec les états "
":math:`\\begin{bmatrix} x & y & \\theta & \\text{vel}_l & \\text{vel}_r & "
"\\text{dist}_l & \\text{dist}_r & \\text{voltError}_l & \\text{voltError}_r "
"& \\text{headingError} \\end{bmatrix}^T`, qui génèrent des tensions gauche "
"et droite, et peut prendre des entrées de l'une ou l'autre source de vision "
"(comme :math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`) ou des "
"encodeurs et gyroscopes (comme :math:`\\begin{bmatrix} \\text{dist}_l & "
"\\text{dist}_r & \\theta \\end{bmatrix}^T`)."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:41
msgid ""
"For the ``DifferentialDriveStateEstimator``, it is important that the state-"
"space model is accurate to the physical hardware. Characterization using the"
" frc-characterization drivetrain tools to find linear and angular kV and kA,"
" combined with ``LinearSystem``'s ``identifyDrivetrainSystem`` "
"(Java)/``IdentifyDrivetrainSystem`` (C++), is an easy way to accurately "
"create a state-space model of your robot's drivetrain."
msgstr ""
"Pour le ``DifferentialDriveStateEstimator``, il est important que le modèle "
"d'espace-état soit précis par rapport au carastéristiques physiques du "
"robot. La caractérisation à l'aide des outils de caractérisation FRC pour la"
" base pilotable afin de trouver des kV et kA linéaires et angulaires, "
"combinée avec le système ``identifyDrivetrainSystem`` "
"(Java)/``IdentifyDrivetrainSystem`` (C++), est un moyen facile pour créer un"
" modèle d'espace-état de votre robot."
