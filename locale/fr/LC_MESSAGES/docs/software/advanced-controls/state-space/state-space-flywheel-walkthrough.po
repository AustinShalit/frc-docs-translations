# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-07 16:13+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:2
msgid "State-Space Controller Walkthrough"
msgstr "Description de l'espace-état d'un controleur"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:4
msgid ""
"Before following this tutorial, readers are recommended to have read an "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."
msgstr ""
"Avant de poursuivre la lecture de ce didacticiel, il est recommandé aux "
"lecteurs d’avoir pris connaissance du document :ref:`docs/software/advanced-"
"controls/state-space/state-space-intro:Introduction to state-space control`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:6
msgid ""
"The goal of this tutorial is to provide \"end-to-end\" instructions on "
"implementing a state-space controller for a flywheel.  By following this "
"tutorial, readers will learn how to:"
msgstr ""
"L’objectif de ce didacticiel est de fournir des instructions de \"bout à "
"bout\" sur la mise en œuvre dans l'espace d'état d’un contrôleur pour un "
"volant d'inertie. En parcourant ce didacticiel, les lecteurs apprendront à:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:8
msgid ""
"Create an accurate state-space model of a flywheel using :term:`system "
"identification` or CAD software."
msgstr ""
"Créer un modèle espace-état précis d’un volant d'inertie à l'aide de "
":term:`l’identification de système` ou d'un logiciel CAO."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:9
msgid ""
"Implement a Kalman Filter to filter encoder velocity measurements without "
"lag."
msgstr ""
"Implémenter un filtre Kalman pour filtrer les mesures de vitesse de "
"l’encodeur sans décalage."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:10
msgid ""
"Implement a :ref:`LQR <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` feedback controller which, when"
" combined with model-based feedforward, will generate voltage :term:`inputs "
"<input>` to drive the flywheel to a :term:`reference`."
msgstr ""
"implémenter une :ref:`LQR <docs/software/advanced-controls/state-space"
"/state-space-intro:The Linear-Quadratic Regulator>` commande de rétroaction "
"qui, lorsqu’elle est combinée avec le modèle de commande prédictive, "
"générera de la tension :term:`inputs <input>`  afin de placer le volant "
"d'inertie à la :term:`référence`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:12
msgid ""
"This tutorial is intended to be approachable for teams without a great deal "
"of programming expertise.  While the WPILib library offers significant "
"flexibility in the manner in which its state-space control features are "
"implemented, closely following the implementation outlined in this tutorial "
"should provide teams with a basic structure which can be reused for a "
"variety of state-space systems."
msgstr ""
"Ce tutoriel se veut être accessible pour les équipes n'ayant pas beaucoup "
"d’expertise en programmation. Bien que la bibliothèque WPILib offre une "
"flexibilité significative dans la manière dont ses fonctionnalités  de "
"contrôle dans l’espace d’état sont implémentées, parcourir attentivement "
"l'implémentation décrite dans ce didacticiel devrait fournir aux équipes une"
" structure de base qui peut être réutilisée pour une variété de systèmes "
"espace-état."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:14
msgid ""
"The full example is available in the state-space flywheel (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" and state-space flywheel system identification (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" example projects."
msgstr ""
"L’exemple complet du modèle espace-état d'un volant d'inertie est disponible"
" (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
"  et identification du système du modèle espace-état du volant d'inertie "
"(`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" exemples de projets."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:22
msgid "Modeling Our Flywheel"
msgstr "Modélisation de notre volant d'inertie"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:26
msgid ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\ "
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}"
msgstr ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\ "
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:45
msgid "Modeling with System Identification"
msgstr "Modélisation par identification du système"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:49
msgid ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\ \\mathbf{a} = "
"\\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + "
"\\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V"
msgstr ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\ \\mathbf{a} = "
"\\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + "
"\\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:53
msgid ""
"Where :math:`\\mathbf{v}` is flywheel velocity, :math:`\\mathbf{a}` and "
":math:`\\mathbf{\\dot{v}}` are flywheel acceleration, and :math:`V` is "
"voltage. Rewriting this with the standard convention of :math:`\\mathbf{x}` "
"for the state vector and :math:`\\mathbf{u}` for the input vector, we find:"
msgstr ""
"Où :math:`\\mathbf{v}` est la vitesse du volant d'inertie, "
":math:`\\mathbf{a}` et :math:`\\mathbf{\\dot{v}}` sont l'accélération de la "
"roue d'inertie, et :math:`V` est la tension. En reformulant ce qui précède "
"selon la représentation conventionnelle :math:`\\mathbf{x}` pour le vecteur "
"d'état et :math:`\\mathbf{u}` pour le vecteur d'entrée, nous trouvons:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:55
msgid ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}"
msgstr ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:58
msgid ""
"The second part of state-space notation relates the system's current "
":term:`state` and :term:`inputs <input>` to the :term:`output`. In the case "
"of a flywheel, our output vector :math:`\\mathbf{y}` (or things that our "
"sensors can measure) is our flywheel's velocity, which also happens to be an"
" element of our :term:`state` vector :math:`\\mathbf{x}`. Therefore, our "
"output matrix is :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, and"
" our system feedthrough matrix is :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Writing this out in continuous-time state-space notation "
"yields the following."
msgstr ""
"La deuxième partie de la notation espace-état relie les termes actuels du "
"système :term:`état` et :term:`entrées<input>` à la :term:`sortie`. Dans le "
"cas d’un volant d'inertie, notre vecteur de sortie :math:`\\mathbf{y}` (ou "
"toute autre grandeur que nos capteurs peuvent mesurer) est la vitesse de "
"notre volant d'inertie, qui se trouve également être un élément de notre "
"vecteur :term:`d’état` :math:`\\mathbf{x}`. Par conséquent, notre matrice de"
" sortie est :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`,  et "
"notre matrice du système de la traversée est :math:`\\mathbf{D} = "
"\\begin{bmatrix}0 \\end{bmatrix}`.  En reformulant ce qui précède selon la "
"notation espace-état en temps continu conduit au résultat suivant."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:60
msgid ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\ "
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + "
"\\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}"
msgstr ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\ "
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + "
"\\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:64
msgid ""
"The ``LinearSystem`` class contains methods for easily creating state-space "
"systems identified using :term:`system identification`. This example shows a"
" flywheel model with a kV of 0.023 and a kA of 0.001:"
msgstr ""
"La classe ``LinearSystem`` contient des méthodes permettant de créer "
"facilement des systèmes espace-état  identifiés à l’aide de la méthode "
":term:`d’identification de système`. Cet exemple montre un modèle volant "
"d'inertie avec un kV de 0.023 et un kA de 0.001 :"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:91
msgid "Modeling Using Flywheel Moment of Inertia and Gearing"
msgstr ""
"Modélisation à l’aide du moment d'inertie du volant d'inertie et de "
"l'engrenage."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:93
msgid ""
"A flywheel can also be modeled without access to a physical robot, using "
"information about the motors, gearing and flywheel's :term:`moment of "
"inertia`. A full derivation of this model is presented in Section 8.2.1 of  "
"`Controls Engineering in FRC <https://file.tavsys.net/control/controls-"
"engineering-in-frc.pdf>`__."
msgstr ""
"Un volant d'inertie peut également être modélisé sans avoir accès à un robot"
" physique, en utilisant des informations sur les moteurs, l’engrenage et le "
"volant d'inertie :term:`moment d'inertie`. Une dérivation complète de ce "
"modèle est présentée dans la Section 8.2.1 du document `Controls Engineering"
" in FRC <https://file.tavsys.net/control/controls-engineering-in-"
"frc.pdf>`__."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:95
msgid ""
"The ``LinearSystem`` class contains methods to easily create a model of a "
"flywheel from the flywheel's motors, gearing and :term:`moment of inertia`. "
"The moment of inertia can be calculated using CAD software or using physics."
" The examples used here are detailed in the flywheel example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."
msgstr ""
"La classe ``LinearSystem`` contient des méthodes pour créer facilement un "
"modèle de volant d'inertie à partir de ses moteurs, de l’engrenage et du "
":term:`moment d'inertie`.  Le moment d’inertie peut être calculé à l’aide "
"d’un logiciel CAO ou en utilisant la physique du système. Les exemples "
"utilisés ici sont détaillés dans le projet d’exemple du volant d'inertie "
"(`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:97
msgid ""
"For WPILib's state-space classes, gearing is written as output over input --"
" that is, if the flywheel spins slower than the motors, this number should "
"be greater than one."
msgstr ""
"Pour les classes espace-état de la WPILib, l’engrenage est modélisé par une "
"fonction de sortie sur entrée -- c’est-à-dire que si le volant d'inertie "
"tourne plus lentement que les moteurs, ce nombre devrait être supérieur à "
"un."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:99
msgid ""
"The C++ LinearSystem class uses :ref:`the C++ Units Library <docs/software"
"/basic-programming/cpp-units:The C++ Units Library>` to prevent unit mixups "
"and assert dimensionality."
msgstr ""
"La classe C++ LinearSystem utilise :ref:`librairie d’unités C++ "
"<docs/software/basic-programming/cpp-units:The C++ Units Library>` pour "
"prévenir les mélanges des unités et se conformer à l'analyse dimensionnelle."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:126
msgid "Kalman Filters: Observing Flywheel State"
msgstr "Filtres de Kalman : Observation de l’état du volant d'inertie"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:128
msgid ""
"Kalman filters are used to filter our velocity measurements using our state-"
"space model to generate a state estimate :math:`\\mathbf{\\hat{x}}`. As our "
"flywheel model is linear, we can use a Kalman filter to estimate the "
"flywheel's velocity. WPILib's Kalman filter takes a ``LinearSystem`` (which "
"we found above), along with standard deviations of model and sensor "
"measurements. We can adjust how \"smooth\" our state estimate is by "
"adjusting these weights. Larger state standard deviations will cause the "
"filter to \"distrust\" our state estimate and favor new measurements more "
"highly, while larger measurement standard deviations will do the opposite."
msgstr ""
"Les filtres Kalman sont utilisés pour filtrer nos mesures de vitesse à "
"l’aide de notre modèle espace-état pour générer une estimation de l’état "
":math:`\\mathbf{\\hat{x}}`. Comme notre modèle de volant est linéaire, nous "
"pouvons utiliser un filtre Kalman pour estimer la vitesse du volant.  Le "
"filtre Kalman fournie par la  WPILib prend un  ``système linéaire`` ou "
"``LinearSystem`` (que nous avons trouvé ci-dessus), ainsi que des  écarts-"
"types des mesures du modèle et des capteurs.  Nous pouvons ajuster le "
"\"lissage\" de notre de l'état estimé en ajustant ces poids. Les déviations "
"standard plus importants de l’état feront en sorte que le filtre \"se "
"conforme moins\"  à notre estimation de l’état et favorisera plus fortement "
"les nouvelles mesures, tandis que des valeurs plus grandes de déviations "
"standard auront un effet contraire."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:130
msgid ""
"In the case of a flywheel we start with a state standard deviation of 3 "
"rad/s and a measurement standard deviation of 0.01 rad/s. These values are "
"up to the user to choose -- these weights produced a filter that was "
"tolerant to some noise but whose state estimate quickly reacted to external "
"disturbances for *a* flywheel -- and should be tuned to create a filter that"
" behaves well for your specific flywheel. Graphing states, measurements, "
"inputs, references, and outputs over time is a great visual way to tune "
"Kalman filters."
msgstr ""
"Dans le cas d’un volant d'inertie, nous commençons par un écart type d’état "
"de 3 rad/s et un écart type de mesure de 0.01 rad/s. Le choix de ces valeurs"
" est à la discrétion de l’utilisateur - ces poids ont produit un filtre qui "
"était tolérant à certains bruits, mais dont l’estimation de l’état a "
"rapidement réagi aux perturbations externes pour *un* volant d'inertie - et "
"doivent être réglés pour créer un filtre qui soit conforme à votre volant "
"spécifique. Les tracés des états, des mesures, des entrées, des références "
"et des sorties au fil du temps sont un excellent moyen visuel de régler les "
"filtres de Kalman."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:134
msgid ""
"The above graph shows two differently tuned Kalman filters, as well as a "
":ref:`single-pole IIR filter <docs/software/advanced-controls/filters"
"/linear-filter:Linear Filters>` and a :ref:`docs/software/advanced-"
"controls/filters/median-filter:Median Filter`. This data was collected with "
"a shooter over ~5 seconds, and four balls were run through the shooter (as "
"seen in the four dips in velocity). While there are no hard rules on "
"choosing good state and measurement standard deviations, they should in "
"general be tuned to trust the model enough to reject noise while reacting "
"quickly to external disturbances."
msgstr ""
"Le graphique ci-dessus montre deux filtres de Kalman réglés différemment, "
"ainsi qu’un :ref:`filtre IIR simple-pôle <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` et un :ref:`docs/software"
"/advanced-controls/filters/median-filter:Median Filter`. Ces données ont été"
" recueillies avec un tireur sur ~5 secondes, et quatre balles ont été "
"lancées à travers le tireur (comme on le voit dans les quatre creux de "
"vitesse). Bien qu’il n’y ait pas de règles strictes sur le choix du bon état"
" et des écarts-types des mesures, ils devraient en général être réglés pour "
"se rapprocher suffisamment du modèle pour éliminer le bruit tout en "
"réagissant rapidement aux perturbations externes."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:136
msgid ""
"Because the feedback controller computes error using the :term:`x-hat` "
"estimated by the Kalman filter, the controller will react to disturbances "
"only as quickly the filter's state estimate changes. In the above chart, the"
" orange plot (with a state standard deviation of 3.0 and measurement "
"standard deviation of 0.2) produced a filter that reacted quickly to "
"disturbances while rejecting noise, while the magenta filter was barely "
"affected by the velocity dips."
msgstr ""
"Comme contrôleur de rétroaction calcule l’erreur à l’aide du paramètre  "
":term:`x-hat` estimé par le filtre de Kalman, le contrôleur ne réagira aux "
"perturbations qu'aussi rapidement que l’estimation d’état du filtre change. "
"Dans le graphique ci-dessus, le graphe orange (avec un écart type d’état de "
"3.0 et un écart type de mesure de 0.2) a produit un filtre qui réagit "
"rapidement aux perturbations tout en rejetant le bruit, tandis que le filtre"
" magenta a été à peine affecté par les baisses de vitesse."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:162
msgid ""
"Because Kalman filters use our state-space model in the :ref:`docs/software"
"/advanced-controls/state-space/state-space-observers:Predict step`, it is "
"important that our model is as accurate as possible. One way to verify this "
"is to record a flywheel's input voltage and velocity over time, and replay "
"this data by calling only ``predict`` on the Kalman filter. Then, the kV and"
" kA gains (or moment of inertia and other constants) can be adjusted until "
"the model closely matches the recorded data."
msgstr ""
"Étant donné que les filtres de Kalman utilisent notre modèle espace-état "
"dans :ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict step`, il est important que notre modèle soit aussi précis"
" que possible. Une façon de vérifier cela est d’enregistrer la tension "
"d’entrée et la vitesse d’entrée d’un volant d'inertie au fil du temps, et de"
" rejouer ces données en appelant uniquement ``predict`` sur le filtre de "
"Kalman. Ensuite, les gains kV et kA (ou moment d’inertie et autres "
"constantes) peuvent être ajustés jusqu’à ce que le modèle corresponde "
"étroitement aux données enregistrées."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:164
msgid "Todo"
msgstr "À faire"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:164
msgid "do we need to elaborate on this^ more?"
msgstr "avons-nous besoin d’élaborer ceci d'avantage?"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "Linear-Quadratic Regulators and Plant Inversion Feedforward"
msgstr ""
"Régulateurs linéaires-quadratiques et commande prédictive inverse de procédé"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:169
msgid ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` finds a feedback controller to drive our "
"flywheel :term:`system` to its :term:`reference`. Because our flywheel has "
"just one state, the control law picked by our LQR will be in the form "
":math:`\\mathbf{u = K (r - x)}` where :math:`\\mathbf{K}` is a 1x1 matrix; "
"in other words, the control law picked by LQR is simply a proportional "
"controller, or a PID controller with only a P gain. This gain is chosen by "
"our LQR based on the state excursion and control efforts we pass it. More on"
" tuning LQR controllers can be found in the :ref:`LQR application example "
"<docs/software/advanced-controls/state-space/state-space-intro:LQR: example "
"application>`."
msgstr ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` trouve un contrôleur de rétroaction pour amener "
"notre :term:`système` volant d'inertie à sa :term:`référence`. Parce que "
"notre volant n’a qu’un seul état, la loi de commande choisie par notre LQR "
"sera sous la forme :math:`\\mathbf{u = K (r - x)}` où :math:`\\mathbf{K}` "
"est une matrice 1x1; en d’autres termes, la loi de commande choisie par "
"notre LQR est simplement un contrôleur proportionnel, ou un contrôleur PID "
"avec seulement un gain P. Ce gain est choisi par notre LQR en fonction de "
"l’excursion d'état et des efforts de contrôle que nous lui transmettons. En "
"savoir plus sur le réglage des contrôleurs LQR, consultez :ref:`LQR "
"application example <docs/software/advanced-controls/state-space/state-"
"space-intro:LQR: example application>`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:171
msgid ""
"Much like ``SimpleMotorFeedforward`` can be used to generate feedforward "
"voltage inputs given kS, kV, and kA constants, the Plant Inversion "
"Feedforward class generate :ref:`feedforward <docs/software/advanced-"
"controls/state-space/state-space-intro:Visualizing Feedforward>` voltage "
"inputs given a state-space system. The voltage commands generated by the "
"``LinearSystemLoop`` class are the sum of the feedforward and feedback "
"inputs."
msgstr ""
"Tout comme le ``SimpleMotorFeedforward`` peut être utilisé pour générer des "
"tensions d'entrée de la commande prédictive étant donnés les constantes kS, "
"kV, et kA, la classe ``Plant Inversion Feedforward`` génère "
":ref:`feedforward <docs/software/advanced-controls/state-space/state-space-"
"intro:Visualizing Feedforward>` les tensions d'entrée étant donné le système"
" espace-état. Les commandes de tension générées par la classe "
"``LinearSystemLoop`` sont la somme des entrées des commandes prédictive et "
"de rétroaction."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:198
msgid "Bringing it All Together: LinearSystemLoop"
msgstr "En rassemblant le tout: LinearSystemLoop"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:200
msgid ""
"LinearSystemLoop combines our system, controller, and observer that we "
"created earlier. The constructor shown will also instantiate a "
"``PlantInversionFeedforward``."
msgstr ""
"LinearSystemLoop combine notre système, notre contrôleur et notre "
"observateur que nous avons créés plus tôt. Le constructeur montré instancie "
"également un ``PlantInversionFeedforward``."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:226
msgid ""
"Once we have our ``LinearSystemLoop``, the only thing left to do is actually"
" run it. To do that, we'll periodically update our Kalman filter with our "
"new encoder velocity measurements and apply new voltage commands to it. To "
"do that, we first set the :term:`reference`, then ``correct`` with the "
"current flywheel speed, ``predict`` the Kalman filter into the next "
"timestep, and apply the inputs generated using ``getU``."
msgstr ""
"Une fois que nous avons obtenu notre ``LinearSystemLoop``, la dernière chose"
" à faire est de l’exécuter. Pour ce faire, nous mettrons périodiquement à "
"jour notre filtre Kalman avec nos nouvelles mesures de vitesse d’encodeur et"
" lui appliquerons de nouvelles commandes de tension. Dans cette optique, "
"nous avons d’abord défini la :term:`référence`, puis ``corrigé`` avec la "
"vitesse actuelle du volant d'inertie, ``prédit`` le filtre de Kalman dans le"
" prochain pas de temps, et appliqué les entrées générées à l’aide de "
"``getU``."
