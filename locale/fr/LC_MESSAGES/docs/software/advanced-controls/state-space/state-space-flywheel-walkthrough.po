# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-07 04:12+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:2
msgid "State-Space Controller Walkthrough"
msgstr "Description de l'espace-état d'un controleur"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:4
msgid ""
"Before following this tutorial, readers are recommended to have read an "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."
msgstr ""
"Avant de poursuivre la lecture de ce didacticiel, il est recommandé aux "
"lecteurs d’avoir pris connaissance du document :ref:`docs/software/advanced-"
"controls/state-space/state-space-intro:Introduction to state-space control`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:6
msgid ""
"The goal of this tutorial is to provide \"end-to-end\" instructions on "
"implementing a state-space controller for a flywheel.  By following this "
"tutorial, readers will learn how to:"
msgstr ""
"L’objectif de ce didacticiel est de fournir des instructions de \"bout à "
"bout\" sur la mise en œuvre dans l'espace d'état d’un contrôleur pour un "
"volant d'inertie. En parcourant ce didacticiel, les lecteurs apprendront à:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:8
msgid ""
"Create an accurate state-space model of a flywheel using :term:`system "
"identification` or CAD software."
msgstr ""
"Créer un modèle espace-état précis d’un volant d'inertie à l'aide de "
":term:`l’identification de système` ou d'un logiciel CAO."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:9
msgid ""
"Implement a Kalman Filter to filter encoder velocity measurements without "
"lag."
msgstr ""
"Implémenter un filtre Kalman pour filtrer les mesures de vitesse de "
"l’encodeur sans décalage."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:10
msgid ""
"Implement a :ref:`LQR <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` feedback controller which, when"
" combined with model-based feedforward, will generate voltage :term:`inputs "
"<input>` to drive the flywheel to a :term:`reference`."
msgstr ""
"implémenter une :ref:`LQR <docs/software/advanced-controls/state-space"
"/state-space-intro:The Linear-Quadratic Regulator>` commande de rétroaction "
"qui, lorsqu’elle est combinée avec le modèle de commande prédictive, "
"générera de la tension :term:`inputs <input>`  afin de placer le volant "
"d'inertie à la :term:`référence`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:12
msgid ""
"This tutorial is intended to be approachable for teams without a great deal "
"of programming expertise.  While the WPILib library offers significant "
"flexibility in the manner in which its state-space control features are "
"implemented, closely following the implementation outlined in this tutorial "
"should provide teams with a basic structure which can be reused for a "
"variety of state-space systems."
msgstr ""
"Ce tutoriel se veut être accessible pour les équipes n'ayant pas beaucoup "
"d’expertise en programmation. Bien que la bibliothèque WPILib offre une "
"flexibilité significative dans la manière dont ses fonctionnalités  de "
"contrôle dans l’espace d’état sont implémentées, parcourir attentivement "
"l'implémentation décrite dans ce didacticiel devrait fournir aux équipes une"
" structure de base qui peut être réutilisée pour une variété de systèmes "
"espace-état."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:14
msgid ""
"The full example is available in the state-space flywheel (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" and state-space flywheel system identification (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" example projects."
msgstr ""
"L’exemple complet du modèle espace-état d'un volant d'inertie est disponible"
" (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
"  et identification du système du modèle espace-état du volant d'inertie "
"(`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/master/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" exemples de projets."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:22
msgid "Modeling Our Flywheel"
msgstr "Modélisation de notre volant d'inertie"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:26
msgid ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\ "
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}"
msgstr ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\ "
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:45
msgid "Modeling with System Identification"
msgstr "Modélisation par identification du système"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:49
msgid ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\ \\mathbf{a} = "
"\\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + "
"\\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V"
msgstr ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\ \\mathbf{a} = "
"\\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + "
"\\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:53
msgid ""
"Where :math:`\\mathbf{v}` is flywheel velocity, :math:`\\mathbf{a}` and "
":math:`\\mathbf{\\dot{v}}` are flywheel acceleration, and :math:`V` is "
"voltage. Rewriting this with the standard convention of :math:`\\mathbf{x}` "
"for the state vector and :math:`\\mathbf{u}` for the input vector, we find:"
msgstr ""
"Où :math:`\\mathbf{v}` est la vitesse du volant d'inertie, "
":math:`\\mathbf{a}` et :math:`\\mathbf{\\dot{v}}` sont l'accélération de la "
"roue d'inertie, et :math:`V` est la tension. En reformulant ce qui précède "
"selon la représentation conventionnelle :math:`\\mathbf{x}` pour le vecteur "
"d'état et :math:`\\mathbf{u}` pour le vecteur d'entrée, nous trouvons:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:55
msgid ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}"
msgstr ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:58
msgid ""
"The second part of state-space notation relates the system's current "
":term:`state` and :term:`inputs <input>` to the :term:`output`. In the case "
"of a flywheel, our output vector :math:`\\mathbf{y}` (or things that our "
"sensors can measure) is our flywheel's velocity, which also happens to be an"
" element of our :term:`state` vector :math:`\\mathbf{x}`. Therefore, our "
"output matrix is :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, and"
" our system feedthrough matrix is :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Writing this out in continuous-time state-space notation "
"yields the following."
msgstr ""
"La deuxième partie de la notation espace-état relie les termes actuels du "
"système :term:`état` et :term:`entrées<input>` à la :term:`sortie`. Dans le "
"cas d’un volant d'inertie, notre vecteur de sortie :math:`\\mathbf{y}` (ou "
"toute autre grandeur que nos capteurs peuvent mesurer) est la vitesse de "
"notre volant d'inertie, qui se trouve également être un élément de notre "
"vecteur :term:`d’état` :math:`\\mathbf{x}`. Par conséquent, notre matrice de"
" sortie est :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`,  et "
"notre matrice du système de la traversée est :math:`\\mathbf{D} = "
"\\begin{bmatrix}0 \\end{bmatrix}`.  En reformulant ce qui précède selon la "
"notation espace-état en temps continu conduit au résultat suivant."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:60
msgid ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\ "
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + "
"\\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}"
msgstr ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\ "
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + "
"\\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:64
msgid ""
"The ``LinearSystem`` class contains methods for easily creating state-space "
"systems identified using :term:`system identification`. This example shows a"
" flywheel model with a kV of 0.023 and a kA of 0.001:"
msgstr ""
"La classe ``LinearSystem`` contient des méthodes permettant de créer "
"facilement des systèmes espace-état  identifiés à l’aide de la méthode "
":term:`d’identification de système`. Cet exemple montre un modèle volant "
"d'inertie avec un kV de 0.023 et un kA de 0.001 :"
