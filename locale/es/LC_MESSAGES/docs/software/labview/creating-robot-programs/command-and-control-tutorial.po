# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Lian Eng <lianengc@gmail.com>, 2020
# Diana Ramos <dianaracasas@gmail.com>, 2020
# Heber Sepúlveda <heber.sepulveda.m@gmail.com>, 2020
# Jeremy Venegas <jeremy04ven@hotmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-10 16:12+0000\n"
"PO-Revision-Date: 2020-04-25 02:03+0000\n"
"Last-Translator: Jeremy Venegas <jeremy04ven@hotmail.com>, 2020\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:2
msgid "Command and Control Tutorial"
msgstr "Tutorial de comando y control"

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:7
msgid "Introduction"
msgstr "Introducción"

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:9
msgid ""
"Command and Control is a new LabVIEW template added for the 2016 season "
"which organizes robot code into commands and controllers for a collection of"
" robot-specific subsystems. Each subsystem has an independent control loop "
"or state machine running at the appropriate rate for the mechanism and high-"
"level commands that update desired operations and set points. This makes it "
"very easy for autonomous code to build synchronous sequences of commands. "
"Meanwhile, TeleOp benefits because it can use the same commands without "
"needing to wait for completion, allowing for easy cancellation and "
"initiation of new commands according to the drive team input. Each subsystem"
" has a panel displaying its sensor and control values over time, and command"
" tracing to aid in debugging."
msgstr ""
"*Command and Control* es una nueva plantilla de LabVIEW agregada para la "
"temporada 2016 que organiza el código del robot en comandos y controladores "
"para una colección de subsistemas específicos del robot. Cada subsistema "
"tiene un bucle de control independiente o una máquina de estado que se "
"ejecuta a la velocidad adecuada para el mecanismo y los comandos de alto "
"nivel que actualizan las operaciones y los puntos de ajuste deseados. Esto "
"hace que sea muy fácil para el código autónomo construir secuencias "
"síncronas de comandos. Mientras tanto, TeleOp se beneficia porque puede usar"
" los mismos comandos sin necesidad de esperar a que se completen, lo que "
"permite una fácil cancelación e inicio de nuevos comandos de acuerdo con la "
"entrada del equipo de manejo. Cada subsistema tiene un panel que muestra sus"
" valores de sensor y control a lo largo del tiempo, y seguimiento de "
"comandos para ayudar en la depuración."

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:12
msgid "What is Command and Control?"
msgstr "¿Qué es Command and Control?"

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:14
msgid ""
"Command and Control recognizes that FRC robots tend to be built up of "
"relatively independent mechanisms such as Drive, Shooter, Arm, etc. Each of "
"these is referred to as a subsystem and needs code that will coordinate the "
"various sensors and actuators of the subsystem in order to complete "
"requested commands, or actions, such as “Close Gripper” or “Lower Arm”. One "
"of the key principles of this framework is that subsystems will each have an"
" independent controller loop that is solely responsible for updating motors "
"and other actuators. Code outside of the subsystem controller can issue "
"commands which may change the robot’s output, but should not directly change"
" any outputs. The difference is very subtle but this means that outputs can "
"only possibly be updated from one location in the project. This speeds up "
"debugging a robot behaving unexpectedly by giving you the ability to look "
"through a list of commands sent to the subsystem rather than searching your "
"project for where an output may have been modified. It also becomes easier "
"to add an additional sensor, change gearing, or disable a mechanism without "
"needing to modify code outside of the controller."
msgstr ""
"Command and Control reconoce que los robots de FRC tienden a ser construidos"
" de mecanismos relativamente independientes como el Chasis, Disparador, "
"Brazo, etc. Cada uno de estos se conoce como un subsistema y necesita un "
"código que va a coordinar los varios sensores y actuadores del subsistema a "
"fin de que se complete el comando requerido, o acciones, como “Close "
"Gripper” or “Lower Arm”. Una de las claves principales de este framework es "
"que los subsistemas cada una tendrán un bucle con controlador independiente "
"que esta como único responsable de actualizar motores y otros actuadores. "
"Programar fuera del controlador del subsistema puede dañar los comandos que "
"pueden cambiar las salidas del robot, pero no deben directamente cambiar "
"alguna salida. La diferencia es muy simple pero significa que las salidas "
"pueden ser posiblemente actualizadas desde una ubicación en el proyecto. "
"Esto acelera depurando un robot que se comporta inesperadamente dándole la "
"habilidad de ver a través de la lista de comandos enviados al subsistema en "
"vez de buscar su proyecto de donde una salida ha sido modificada. También se"
" vuelve fácil añadir un sensor adicional, cambiar un engrane o deshabilitar "
"un mecanismo sin necesidad de modificar el código fuera del controlador."

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:16
msgid ""
"Game code, primarily consisting of Autonomous and TeleOp, will typically "
"need to update set points and react to the state of certain mechanisms. For "
"Autonomous, it is very common to define the robot’s operation as a  sequence"
" of operations – drive here, pick that up, carry it there, shoot it, etc. "
"Commands can be wired sequentially with additional logic to quickly build "
"complex routines. For teleOp, the same commands can execute asynchronously, "
"allowing the robot to always process the latest driver inputs, and if "
"implemented properly, new commands will interrupt, allowing the drive team "
"to quickly respond to field conditions while also taking advantage of "
"automated commands and command sequences."
msgstr ""
"El código del juego, principalmente consiste en el Autónomo y Teleoperado, "
"va a necesitar actualizar los puntos de ajuste y reaccionar al estado de "
"ciertos mecanismos. Para el Autónomo, es muy común definir la operación del "
"robot como una secuencia de operaciones – maneja aquí, recoge eso, llévalo "
"allá, dispara, etc. Los comandos se pueden conectar secuencialmente con "
"lógica adicional para construir rápido rutinas complejas. Para Teleoperado, "
"los mismos comandos pueden operar de manera síncrona, dejando que el robot "
"siempre procese las últimas entradas del driver, y si lo implementa "
"apropiadamente, nuevos comandos van a interrumpir, dejando que el drive team"
" responda rápido en las condiciones de la cancha mientras también toma "
"ventaja de comandos automatizados y secuencias de comandos."

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:19
msgid "Why should I use Command and Control?"
msgstr "¿Por qué debemos usar Command and Control?"

#: ../../frc-docs/source/docs/software/labview/creating-robot-programs/command-and-control-tutorial.rst:21
msgid ""
"Command and Control adds functionality to the existing LabVIEW project "
"templates, allowing code to scale better with more sophisticated robots and "
"robot code. Subsystems are used to abstract the details of the "
"implementation, and game code is built from sequences of high level command "
"VIs. The commands themselves are VIs that can update set points, perform "
"numerical scaling/mapping between engineering units and mechanism units, and"
" offer synchronization options. If physical changes are made to the robot, "
"such as changing a gearing ratio, changes can be made to just a few command "
"Vis to reflect this change across the entire code base."
msgstr ""
"Command and Control añade funcionalidad a las plantillas de proyecto "
"existentes en LabVIEW, permitiendo que el código se escale mejor con robots "
"y códigos de robot mas sofisticados. Se usan subsistemas para abstraer los "
"detalles de la implementación, y el código de juego es creado a partir de "
"secuencias de VIs de comando de alto nivel. Los comandos por si mismos son "
"VIS que pueden actualizar puntos fijos, realizar mapeo/escalado numérico "
"entre unidades de ingeniería y unidades del mecanismo y pueden ofrecer "
"opciones de sincronización. Si se realizan cambios físicos al robot, como "
"modificar un a relaciona de engranes, se pueden realizar los cambios a solo "
"un poco de VIs de comando para reflejar este cambio a través de todo el "
"código fuente."
